오버로딩(Overloading)
public void println(int i)
public void println(double d)
메서드의 argument가 반드시 달라야 한다

오버로딩 생성자
public Employee(String name, double salary, Date DoB)
public Employee(String name, double salary)
public Employee(String name, Date DoB)
argument가 반드시 달라야 한다
this문구를 이용하여 다른 생성자를 호출할 수 있다


생성자를 물려받을 수 없다
명시적으로 부모생성자를 호출해야 한다

String s = new String("유비")
String s2 = new String("유비")

if(s == s2) -> false
if(s.equals(s2)) -> true

Object에 equals가 있는데
String에도 equals가 있다 = 오버라이딩 했다(두개의 글자가 같으면 true로 하라고 오버라이딩함)

equals는 객체만 비교가 가능하다

------------------------------------------------
toString

현재 객체가 가지고 있는 문자정보
System.out.println(e) = System.out.println(e.toString) 
toString이 생략되어 있는 것


------------------------------------------------
Wrapper Classes

Primitive Data Type	Wrapper Class
======================================
boolean			Boolean
byte			Byte
char			Character
short			Short
int			Integer
long			Long
float			Float
double			Double

int i = 1;  -> Integer i = new Integer(1);

기본타입을 객체로 담기 위해서 필요하다
객체로 담긴 다음에 메서드를 작성하거나 속성화 시키기 위해서

추상화 : 사랑은 매우 많다 하지만 시스템에 담기는 사랑은 필요한거만 담기면 된다 이것이 추상화이다

int pInt = 420;
Integer wInt = new Integer(pInt); //boxing
int p2 = wInt.intValue(); //unboxing

자바 5.0부터는 
int pInt = 420;
Integer wInt = pInt; //autoboxing
int p2 = wInt; //autounboxing

----------------------------------------------------
static 키워드

변수, 메서드, nested classes(클래스 안에 클래스)에 사용된다

class variable은 객체를 안 만들어도 바로 접근이 가능하다.
instance variable